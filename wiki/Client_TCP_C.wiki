#summary Client TCP en C qui se connecte au Flyport et envoie les requêtes demandées.
[http://flyport-wifi-rc-car.googlecode.com/svn/trunk/Images/BanniereWiki.png]

= Introduction =

Client TCP simple en C qui se connecte au Flyport et envoie les requêtes demandées. Utilisé à des fins de test des requêtes sur le Flyport et d'exemple de connexion TCP en C pour le programme de commande final.

On peux également utiliser l'outil [http://en.wikipedia.org/wiki/Netcat NetCat] de la manière suivante :
{{{nc 192.168.1.115 2050}}}. Il suffit ensuite de taper les requêtes au clavier pour les envoyer.


= Protocole =

Le protocole de communication TCP entre le Flyport et un client est le suivant :

 * *Direction* : `D=VALEUR`, où VALEUR ∈ `[0 ; 100]`, 0 signifiant _le plus à gauche_ et 100 _le plus à droite_.
 * *Vitesse* : `V=VALEUR`, où VALEUR ∈ `[0 ; 100]`, 0 signifiant _le plus vite possible en marche arrière_ et 100 _le plus vite possible en marche avant_.

Les requêtes sont envoyées une à une via un buffer TCP de taille fixée.


= Code =

Ce code est extrait de l'article de [http://broux.developpez.com/articles/c/sockets/ Benjamin Roux] (03/2009) qui constitue une bonne introduction aux connexion TCP en C sur les systèmes de type Unix et Windows.

<code language="c">
/* Inclusions standard */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

/* Connectivité TCP/IP */
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>		/* close */
#include <netdb.h>		/* gethostbyname */
#define INVALID_SOCKET -1
#define SOCKET_ERROR -1
#define closesocket(s) close(s)
typedef int     SOCKET;
typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr SOCKADDR;
typedef struct in_addr IN_ADDR;
#define h_addr  h_addr_list[0]	/* pour compatibilité.  */

/* Paramètres de connexion par défaut */
#define ADDR_IP	"192.168.1.115"
#define PORT	2050
#define BUFFER_SIZE 100

int main(void)
{
	/* Création du socket */
	SOCKET          sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == INVALID_SOCKET) {
		perror("socket()");
		exit(errno);
	}
	
	/* Connexion au serveur */
	SOCKADDR_IN     sin = {0};	/* initialise la structure avec des 0 */
	const char     *hostname = ADDR_IP;
	struct hostent *hostinfo = gethostbyname(hostname);	/* on récupère les
	informations de l'hôte auquel on veut se connecter */

	if (hostinfo == NULL) {	/* l'hôte n'existe pas */
		fprintf(stderr, "Unknown host %s.\n", hostname);
		exit(EXIT_FAILURE);
	}
	sin.sin_addr = *(IN_ADDR *) hostinfo->h_addr;	/* l'adresse se trouve dans le
	champ h_addr de la structure hostinfo */
	sin.sin_port = htons(PORT);	/* choix du port utilisé */
	sin.sin_family = AF_INET;

	if (connect(sock, (SOCKADDR *) & sin, sizeof(SOCKADDR)) == SOCKET_ERROR) {
		perror("connect()");
		exit(errno);
	}
	
	/* Boucle du client TCP / Envoi-Réception des données */
	char            buffer[100];
	int             duty_cycle, continuer = 1;
	while (continuer) {
		printf("Entrez un rapport cyclique (0-100) : ");
		scanf("%d", &duty_cycle);

		/* Correction des valeurs entrées */
		if (duty > 100)
			duty_cycle = 100;
		if (duty < 0)
			duty_cycle = 0;

		/* Formattage de la requête Flyport */
		sprintf(buffer, "d=%d\n", duty_cycle);

		if (send(sock, buffer, strlen(buffer), 0) < 0) {
			perror("send()");
			exit(errno);
		}
	}

	/* Cloture de la connexion */
	closesocket(sock);

	return EXIT_SUCCESS;
}
</code>


= Documentation =

 * [http://broux.developpez.com/articles/c/sockets/ Les sockets en C], Benjamin Roux, 03/2009
 * [http://www.bien-programmer.fr/reseaux.php Notes brutes concernant les réseaux], Emmanuel Delahaye, 09/2010